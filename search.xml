<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>logback日志详解</title>
      <link href="/2019/08/14/logback%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/08/14/logback%E6%97%A5%E5%BF%97%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="logback日志详解"><a href="#logback日志详解" class="headerlink" title="logback日志详解"></a>logback日志详解</h1><h2 id="logback的日志输出形式"><a href="#logback的日志输出形式" class="headerlink" title="logback的日志输出形式"></a>logback的日志输出形式</h2><p>在了解logback日志输出之前我们应该先了解logback的文件格式，一个<code>&lt;configuration&gt;</code>标签里面可以配置多个<code>&lt;property&gt;</code>和多个<code>&lt;appender&gt;</code>。</p><blockquote><p>property是name，value的格式，里面配置的是我们的一些配置信息，比如文件输出格式，控制台输出格式，文件生成路径，最大保留时间，文件最大尺寸等，到时候下面的appender里面需要的时候可以直接已<code>${name}</code>的形式进行引用，这些内容一般定义的头部，configuration下面。</p><p>appender主要指定日志的输出形式，一般的需要控制两种，控制台和文件，即要配置两个appender，如果想要配置输出不同日志级别的文件，需要每个日志级别配置一个appender。</p></blockquote><h3 id="输出到控制台"><a href="#输出到控制台" class="headerlink" title="输出到控制台"></a>输出到控制台</h3><p>输出到控制台的时候需要<code>appender</code>需要配置为<code>ConsoleAppender</code>,即这种</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="输出为文件"><a href="#输出为文件" class="headerlink" title="输出为文件"></a>输出为文件</h3><p>输出为文件的时候需要配置日志滚动策略RollingPolicy和触发策略TriggeringPolicy。</p><h4 id="RollingPolicy"><a href="#RollingPolicy" class="headerlink" title="RollingPolicy"></a>RollingPolicy</h4><blockquote><p>注意：TimeBasedRollingPolicy同时可以作为日志滚动策略和出发策略。</p></blockquote><ol><li><h5 id="RollingFileAppender"><a href="#RollingFileAppender" class="headerlink" title="RollingFileAppender"></a><code>RollingFileAppender</code></h5><ul><li><a href="https://logback.qos.ch/manual/appenders.html#SizeBasedTriggeringPolicy" target="_blank" rel="noopener"><code>SizeBasedTriggeringPolicy</code></a></li></ul><p>默认大小为10M</p><ul><li><a href="https://logback.qos.ch/manual/appenders.html#TimeBasedRollingPolicy" target="_blank" rel="noopener"><code>TimeBasedRollingPolicy</code></a></li></ul></li><li><h5 id="TimeBasedRollingPolicy"><a href="#TimeBasedRollingPolicy" class="headerlink" title="TimeBasedRollingPolicy"></a><code>TimeBasedRollingPolicy</code></h5></li></ol><p>输出为文件，类型为<code>RollingFileAppender</code>，同时还需要配置<code>TriggeringPolicy</code>。</p><p>日志转移策略，首先日志生成在test.log里面，<strong>test.log满了之后</strong>，新建tests.1.log，将日志信息复制到tests.1.log里面，<strong>test.log再次满了之后</strong>，新建tests.2.log，将日志转移到tests.2.log里面，再把tests.1.log里面清空，继续在test.log里面写。<strong>也就是说，test.log每满一次，就出发一次日志文件转移的操作。</strong></p><blockquote><p>日志信息新旧顺序方面</p><p>test.log最新，tests.1.log较新，tests.2.log较旧，tests.3.log最旧。</p></blockquote><p>还有就是在按照固定窗口模式生成日志文件的时候，尽管设置的最小文件为1MB，但是实际上都是在4.7、4.8MB左右。这个原因是我一条日志（一个logger.info）的大小就是4.7MB，4.8MB左右，而logback不会打碎一条日志信息到两个文件当中。所以当把这两条日志信息放在一起输出的时候，就是9.7MB，三条合在一起输出的时候就是14.3MB。</p><p>所以，设置的MaxFileSize为1MB还是有效的，不过生产生是肯定不会设置这么小的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Axis2 for Java</title>
      <link href="/2019/07/28/Apache-Axis2-for-Java/"/>
      <url>/2019/07/28/Apache-Axis2-for-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Axis2-Java"><a href="#Apache-Axis2-Java" class="headerlink" title="Apache Axis2/Java"></a>Apache Axis2/Java</h1><p><strong>Introduction</strong></p><p>Apache Axis2™ is a Web Services / SOAP / WSDL engine, the successor to the widely used <a href="http://ws.apache.org/axis/" target="_blank" rel="noopener">Apache Axis</a> SOAP stack. There are two implementations of the Apache Axis2 Web services engine - Apache Axis2/Java and Apache Axis2/C</p><p><strong>Apache Axis2 supports REST-Web-Services</strong></p><p>Apache Axis2 not only supports SOAP 1.1 and SOAP 1.2, but it also has integrated support for the widely popular <a href="http://www.xfront.com/REST-Web-Services.html" target="_blank" rel="noopener">REST style of Web services</a></p><p>note:The binary distribution contains all the Axis2 libraries and modules</p><p>中文解释：axis全称Apache Extensible Interaction System 即<a href="https://baike.baidu.com/item/%E9%98%BF%E5%B8%95%E5%A5%87" target="_blank" rel="noopener">阿帕奇</a>可扩展交互系统。Axis本质上就是一个SOAP引擎，提供创建<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">服务器</a>端、客户端和<a href="https://baike.baidu.com/item/%E7%BD%91%E5%85%B3/98992" target="_blank" rel="noopener">网关</a>SOAP操作的基本框架。Axis目前版本是为Java编写的，不过为C++的版本正在开发中。但Axis并不完全是一个SOAP引擎，它还是一个独立的SOAP服务器和一个嵌入Servlet引擎（例如Tomcat）的服务器。</p><p>由此可见，嵌入式的tomcat早就实现了，并不是Spring Boot独创的。</p><p><strong>提供转化WSDL为Java类的工具。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> FedEx、嵌入式web容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS相关知识</title>
      <link href="/2019/07/05/AQS%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/07/05/AQS%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>AQS=<code>AbstractQueuedSynchronizer</code>,AQS提供了一个实现阻塞锁和相关同步器(<code>semaphores</code>信号量, events, etc)的框架，其依赖于先进先出的等待队列来实现(CLH)。</p></blockquote><p>为了使用一个最基本的同步器，需要实现以下五个基本的方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* <span class="tag">&lt;<span class="name">p</span>&gt;</span>To use this class as the basis of a synchronizer, redefine the</span><br><span class="line">* following methods, as applicable, by inspecting and/or modifying</span><br><span class="line">* the synchronization state using &#123;@link #getState&#125;, &#123;@link</span><br><span class="line">* #setState&#125; and/or &#123;@link #compareAndSetState&#125;:</span><br><span class="line">*</span><br><span class="line">* <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;@link #tryAcquire&#125;</span><br><span class="line">* <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;@link #tryRelease&#125;</span><br><span class="line">* <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;@link #tryAcquireShared&#125;</span><br><span class="line">* <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;@link #tryReleaseShared&#125;</span><br><span class="line">* <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;@link #isHeldExclusively&#125;</span><br><span class="line">* <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CAS含义：开始实现m++，要么在m++上加锁，要么在更大粒度上加锁；但是使用CAS就不用加锁，CAS是CompareAndSwap比较和交换。CAS要求传值的时候传初始值和目标值，写CAS一般是死循环，一直不停的循环，也就是自旋，这也就乐观锁。</p><ul><li>CAS要求必须是原子操作，在其内部处理数据的时候不能被打断；现在的cpu都支持CAS，所以java直接使用CAS类实现。</li></ul><p>synchronized和CAS的适用场景</p><p>synchronized——————超高并发的时候适合，其wait方法不消耗cpu资源。</p><p>CAS———————锁的竞争并不激烈的时候比较适合，其自旋会吃cpu资源，吃内存。</p><blockquote><p>并不一定是乐观锁就比悲观锁好。</p></blockquote><p>AQS内部有一个数，是AtomicInteger类型，叫做state，他管理了一个双向链表，叫CLH，新的线程来了，竞争不到就加入链表，竞争到了就直接用。</p><ul><li><p>互斥锁：不能同时占用，比如有写操作的时候，是需要设置为互斥锁的。</p></li><li><p>共享锁：可以同时占有，比如两个读操作，是可以设置为共享锁的。</p></li></ul><p>下面在自己实现AQS的时候，就可以使用互斥锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">           <span class="comment">// 设置为互斥锁，只能单线程占用</span></span><br><span class="line">           setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>总结：实现Lock有两种办法，一种是通过synchronized实现，一种是通过AQS实现（需要重载三个方法tryAcquired,tryRelease,isHeldExclusively）</p><p>代码如下：</p><p>自己实现的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> albert.tang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-12 11:29</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * jdk实现的Lock接口不是基于synchronized的实现，而是基于AQS的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照推荐，使用内部类实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 只有为1的时候才向下执行</span></span><br><span class="line">            <span class="keyword">assert</span> arg == <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 需要判断当前线程是不是独一无二的持有当前锁</span></span><br><span class="line">            <span class="keyword">if</span> (!isHeldExclusively()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 不能简单的判断是不是等于1，如果别的线程也等于1，相当于把别的线程持有的锁释放了</span></span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> albert.tang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-07-12 10:24</span></span><br><span class="line"><span class="comment"> * join:是让线程顺序结束，不是让线程顺序执行</span></span><br><span class="line"><span class="comment"> * 线程顺序执行：一个线程执行完了之后再让另外一个线程执行</span></span><br><span class="line"><span class="comment"> * 线程顺序结束：主线程等待所有线程执行结束之后在拿取m的值</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * jdk1.6之后，jvm在一个线程去执行一段代码的时候，对第一个线程会有一个偏向，会首先尝试在这个对象上加偏向锁，如果偏向锁有第二个线程来竞争的话，</span></span><br><span class="line"><span class="comment"> * 会进行锁升级，升级成轻量级锁（多数情况下是自旋锁SpinLock），如果并发数越来越高，jdk1.6的时候，如果自旋10次还没能拿到这把锁，会再次进行升级，升级成重量级锁synchronised(悲观锁)</span></span><br><span class="line"><span class="comment"> * 所以synchronized在内部会有一个锁升级的过程。</span></span><br><span class="line"><span class="comment"> * 偏向锁jdk1.6之后就自动打开了，用不用都会优先使用偏向锁。如果一直都是第一个线程执行这段代码的话，一直都是偏向锁。这个偏向锁比不加锁慢不了多少。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * jdk1.5之前认为synchronized是重量级的，但是1.5之后对其进行了优化，所以现在也并不是很重量级，所以实际工作中用什么样的锁效率最高需要进行测试才行。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * jdk1.5之后java并发包增加了很多东西，其中有一把锁叫做ReentrantLock(可重入锁)，这个就和synchronized不太一样了，尽管也是互斥锁，但是是互斥别的线程，不互斥自己的线程。</span></span><br><span class="line"><span class="comment"> * ReentrantLock能够实现Synchronized类似的功能，但是底层实现的机制不一样。</span></span><br><span class="line"><span class="comment"> * ReentrantLock的底层实现就是使用了AQS。</span></span><br><span class="line"><span class="comment"> * Synchronized jdk1.5之前肯定是不可以实现重入的，之后是可重入的。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 为什么有synchronized之后还要加入那么多锁呢？</span></span><br><span class="line"><span class="comment"> * 由于synchronized的加锁是jvm要和操作系统打交道，需要调用操作系统底层的东西才能实现加锁(程序在用户态和内核之前切换比较耗时，但是在1.5之后进行了优化，比如：偏向锁，轻量级锁等等等)</span></span><br><span class="line"><span class="comment"> * 但是并发包里的Lock只用在jvm内部就可以实现锁了，所以它的效率更高。</span></span><br><span class="line"><span class="comment"> * ReentrantLock比synchronized好用还有就是因为可以指定一些condition,不同的情况下让某些线程等待，更加灵活。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * jdk实现的Lock接口不是基于synchronized的实现，而是基于AQS的实现。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 什么时候用自己实现的锁，面试的时候用，工作的时候用自己实现的锁？太少了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> MLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : threads) &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized可以防止指令重排序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AQS、锁、多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot如何配置自定义启动类</title>
      <link href="/2019/06/14/Spring-Boot%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E7%B1%BB/"/>
      <url>/2019/06/14/Spring-Boot%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot如何创建自定义starter</p><blockquote><p>背景：</p><p>（1）有时在公司内部有时候自研中间件，需要被其他项目依赖，这个时候直接引入starter，可以实现自动化配置，可以做到对其他项目代码无污染入侵。</p><p>（2）Spring Boot大量使用了starter模式，比如<code>spring-boot-starter-redis</code>，<code>spring-boot-starter-jdbc</code>，<code>spring-boot-starter-data-jpa</code>，<code>spring-boot-starter-amqp</code>，我们自己做一遍，了然于心，更能够加深对Spring Boot的编程思想的理解与学习。</p></blockquote><p>1.首先我们使用IDEA的Spring Initializr直接创建工程，引入web依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.然后自带的删掉<strong>启动类</strong>，<strong>测试类</strong>，<strong>下面的maven插件</strong>。我们创建的starter属于依赖包，不需要启动类。否则在后续打jar包的时候会报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.创建配置类，可以为引入的starter配置相关属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.创建Client端，定义相关方法操控属性，模拟进行数据处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserProperties userProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClient</span><span class="params">(UserProperties userProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userProperties = userProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userProperties.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userProperties.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.自动创建客户端，创建<code>UserClient</code>实例</p><blockquote><p>注意：<code>@ConditionalOnProperty</code>是用来控制是否启用配置，它的name或者value属性意义相同，区别是name是数组，value只绑定一个属性。当name或者value的属性为havingValue指定值的时候配置才会生效，否则配置不生效。即在下面的配置中，只有当enabled为true的时候配置才生效。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(value = UserProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAutoConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.user"</span>, value = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserClient <span class="title">userClient</span><span class="params">(UserProperties userProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserClient(userProperties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.激活配置类。在别的项目中如果想激活配置类有两种办法，一个是通过spring.factories文件，一个是通过注解实现，下面来分别实现这两种。</p><ul><li>通过spring.factories文件</li></ul><p>在resources下创建META-INF目录，在其下面创建spring.factories文件,如下声明自己自动配置类<code>UserAutoConfigure</code>的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.anhe.springbootstarteruser.properties.UserAutoConfigure</span><br></pre></td></tr></table></figure><ul><li><p>或者通过注解实现，只需要在主类上添加<code>@EnableUserClient</code>注解，不需要编写spring.factories文件，就可以激活配置类，注解定义如下：</p><blockquote><p>关键在于<code>@Import</code>注解，他也申明了自动配置类<code>UserAutoConfigure</code>的路径</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;UserAutoConfigure.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableUserClient &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.配置application.properties提示信息，我们更倾向于在添加配置的时候能够看到配置信息或者默认值之类的，可以按如下方法配置：</p><p>在META-INF下创建文件spring-configuration-metadata.json，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.user.name"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="string">"cxytinadi"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.user.enabled"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"java.lang.Boolean"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"spring.user.age"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"java.lang.Integer"</span>,</span><br><span class="line">      <span class="attr">"defaultValue"</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在其他项目配置的时候就会自动出现提示，包括配置的默认值。</p><p>8.然后在Terminal输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>相关jar包就会打包到本地仓库，本地其他项目就可以直接使用。</p><p>9.demo示例：</p><p>其他项目引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.anhe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.properties加入配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.user.age=20</span><br><span class="line">spring.user.name=tystsyts</span><br><span class="line">spring.user.enabled=true</span><br></pre></td></tr></table></figure><p>如果直接是配置注解启动，需要在主类上加上@EnableUserClient注解，然后在新项目编写controller验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,userClient.getName());</span><br><span class="line">        map.put(<span class="string">"age"</span>,userClient.getAge());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问<code>http://localhost:8080/user</code>就可以获取到结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"tystsyts"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot、自定义starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python自学笔记</title>
      <link href="/2019/06/01/Python%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/06/01/Python%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h2><p>Mac退出命令行模式control+D </p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h5 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><strong>进制转换</strong></h5><p>0b表示二进制 </p><p>0o表示八进制 </p><p>0x表示十六进制 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0b10</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0o10</span> </span><br><span class="line"><span class="number">8</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0x10</span> </span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><h5 id="number类型"><a href="#number类型" class="headerlink" title="number类型"></a><strong>number类型</strong></h5><p>bin表示把其他类型的数据转换为二进制 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">10</span>) </span><br><span class="line"><span class="string">'0b1010'</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">0b1010</span>) </span><br><span class="line"><span class="string">'0b1010'</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">0o100</span>) </span><br><span class="line"><span class="string">'0b1000000'</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">0x122</span>) </span><br><span class="line"><span class="string">'0b100100010'</span></span><br></pre></td></tr></table></figure><blockquote><p>int()表示转换为10进制，hex()表示转换为16进制，oct()表示转换为8进制 </p></blockquote><p>数据类型：<strong>bool属于Number</strong>，bool()可以把数字转成True或者False,只有0或者’’其他表示空含义的表示False,False表示空的，bool(None)表示False，36j表示复数 </p><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a><strong>转义字符</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello\</span></span><br><span class="line"><span class="string">world'</span></span><br><span class="line"><span class="string">'helloworld'</span></span><br></pre></td></tr></table></figure><blockquote><p>\n是换行 \r回车 </p></blockquote><p>转义地址路径 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'c:\aa\bb\cc'</span>)</span><br><span class="line">c:ab\cc</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'c:\\aa\\bb\\cc'</span>)</span><br><span class="line">c:\aa\bb\cc</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'c:\aa\bb\cc'</span>)</span><br><span class="line">c:\aa\bb\cc</span><br></pre></td></tr></table></figure><blockquote><p>r或者R表示原始字符串</p></blockquote><h5 id="字符串str"><a href="#字符串str" class="headerlink" title="字符串str"></a><strong>字符串str</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello '</span>*<span class="number">5</span></span><br><span class="line"><span class="string">'hello hello hello hello hello '</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">2</span>]</span><br><span class="line"><span class="string">'l'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">7</span>]</span><br><span class="line"><span class="string">'o'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'d'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">'ello'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="string">'hello worl'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">0</span>:<span class="number">-5</span>]</span><br><span class="line"><span class="string">'hello '</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">6</span>:]</span><br><span class="line"><span class="string">'world'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">'llo'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello world'</span>[<span class="number">-5</span>:]</span><br><span class="line"><span class="string">'world'</span></span><br></pre></td></tr></table></figure><blockquote><p>截取时，正数代表从前往后数的<strong>索引</strong>位置，复数代表从后往前数<strong>第几个</strong>位置。</p></blockquote><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>列表可以支持多种数据类型，支持嵌套列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">'中国'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>][<span class="number">3</span>]</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>][<span class="number">6</span>]</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>][<span class="number">-2</span>]</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>][<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="string">'中国'</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>][<span class="number">-2</span>:<span class="number">-1</span>]</span><br><span class="line">[<span class="literal">False</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>][<span class="number">-3</span>:]</span><br><span class="line">[<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'汉字'</span>,<span class="string">'中国'</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>]*<span class="number">3</span></span><br><span class="line">[<span class="string">'汉字'</span>, <span class="string">'中国'</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="string">'汉字'</span>, <span class="string">'中国'</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="string">'汉字'</span>, <span class="string">'中国'</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure><blockquote><p>注意：使用带:的的形式获取，返回的还是list，使用单一的索引的话获取的是list的值，这一点在编码的过程中很容易报错，尽管可以检查出来，但是还是应该保持好的编码习惯。</p></blockquote><h5 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'kai'</span>,<span class="string">"shi"</span>,<span class="literal">True</span>,<span class="literal">False</span>)[<span class="number">2</span>]</span><br><span class="line"><span class="string">'kai'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'kai'</span>,<span class="string">"shi"</span>,<span class="literal">True</span>,<span class="literal">False</span>)[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'kai'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'kai'</span>,<span class="string">"shi"</span>,<span class="literal">True</span>,<span class="literal">False</span>)[<span class="number">-3</span>:<span class="number">-1</span>]</span><br><span class="line">(<span class="string">'shi'</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>可以看见，tuple和list差不多，但是有区别，tuple是不可变的，类似于java中的数组</p><blockquote><p>注意，如何创建具有单个元素的元组(IDLE会把其认为是运算时候的括号，所以做了硬性规定，单个元组后面需要加，逗号)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type((<span class="number">1</span>))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">(<span class="number">1</span>,)</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">(<span class="string">"hello"</span>)</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">(<span class="string">"hello"</span>,)</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>数据类型总结：<code>str</code>, <code>list</code>,<code>tuple</code>都是序列，都是有序的，都有序号，以后还有无序的。</p><p><strong>序列</strong>相关方法,in, not in,min(),max(),len()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">345</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len((<span class="number">1</span>,<span class="number">2.3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len([<span class="number">2</span>,<span class="number">1</span>,<span class="string">"kai"</span>,<span class="string">"shi"</span>])</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max((<span class="number">1</span>,<span class="number">2.3</span>,<span class="number">45</span>,<span class="number">6</span>))</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(<span class="string">"hello world"</span>)</span><br><span class="line"><span class="string">' '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(<span class="string">"hello world"</span>)</span><br><span class="line"><span class="string">'w'</span></span><br></pre></td></tr></table></figure><p>序列比较字母是通过ASCII码实现的，获取字母的ASCII码的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'d'</span>)</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'w'</span>)</span><br><span class="line"><span class="number">119</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">' '</span>)</span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">"1"</span>)</span><br><span class="line"><span class="number">49</span></span><br></pre></td></tr></table></figure><h5 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h5><p>集合的特点：无序，不重复，不能切片，in(),len()这些方法都可以使用，集合还有并集|，交集&amp;的运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">set</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; 2 in &#123;1,2,3&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; - &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; &amp; &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; | &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>定义空的set集合，使用set()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(set())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">set</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">len</span><span class="params">(set<span class="params">()</span>)</span></span></span><br><span class="line"><span class="class">0</span></span><br></pre></td></tr></table></figure><h5 id="字典dict"><a href="#字典dict" class="headerlink" title="字典dict"></a>字典dict</h5><p>dict和map类似，不能重复相同的key，访问value通过[]来实现</p><p>key的类型可以为int,str，key<strong>必须是不可变的类型</strong>，list是不可以的，tuple是可以的</p><p>value的类型可以为str，int，float，list，set，dict</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'key'</span>:<span class="string">'value'</span>,<span class="number">1</span>:<span class="number">1</span>,<span class="number">3</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="string">'key'</span>: <span class="string">'value'</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(dict())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; &#123;1:1,'1':"chuan"&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="string">'1'</span>: <span class="string">'chuan'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="string">'1'</span>:<span class="string">"chuan"</span>&#125;[<span class="string">'1'</span>]</span><br><span class="line"><span class="string">'chuan'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="string">'1'</span>:<span class="string">"chuan"</span>,<span class="number">3</span>:(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="string">'1'</span>: <span class="string">'chuan'</span>, <span class="number">3</span>: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="string">'1'</span>:<span class="string">"chuan"</span>,<span class="number">3</span>:(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)&#125;[<span class="number">3</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;(<span class="number">1</span>,<span class="number">2</span>):<span class="number">1</span>,<span class="string">'1'</span>:<span class="string">"chuan"</span>,<span class="number">3</span>:(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)&#125;</span><br><span class="line">&#123;(<span class="number">1</span>, <span class="number">2</span>): <span class="number">1</span>, <span class="string">'1'</span>: <span class="string">'chuan'</span>, <span class="number">3</span>: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)&#125;</span><br></pre></td></tr></table></figure><p>基本数据类型总结</p><p><img src="/2019/06/01/Python自学笔记/Users/circleus/Library/Application Support/typora-user-images/image-20190511153844503.png" alt="image-20190511153844503"></p><h3 id="变量与运算符"><a href="#变量与运算符" class="headerlink" title="变量与运算符"></a>变量与运算符</h3><p>语法规定：变量名要是字母，数字，下划线，但是不能使用数字开头，也不能使用python来命名，变量名是可以区分大小写的，这也正说明了python是动态语言。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pytho保留关键字：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'async'</span>, <span class="string">'await'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><p>规范一点，尽量不使用type作为变量类型</p><p>基本数据类型被改变以后，不影响之前的变量的值，引用类型改变以后，之前赋值的变量的值会被改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 证明str是不可变的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'name'</span>;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">4326024504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = b + <span class="string">"user"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">nameuser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">4663953712</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(id(b))</span><br><span class="line"><span class="string">'0x115fe4930'</span></span><br></pre></td></tr></table></figure><blockquote><p>内存地址一般使用16进制表示，一般不使用10进制来表示</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 证明list是可以改变的，添加一个元素，还是在原来的内存地址</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">4663952648</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">4663952648</span></span><br></pre></td></tr></table></figure><p>元组中的list是可以改变的，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">11</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">15</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">11</span>, <span class="number">12</span>, <span class="number">24</span>, <span class="number">15</span>])</span><br></pre></td></tr></table></figure><p>例子:会先计算&gt;=，true在python里面是1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b+=b&gt;=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list,tuple逻辑运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>) &gt; (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bool运算</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">not</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 需要执行第二个元素才能确定结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'c'</span></span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="comment"># 执行第一个元素就知道结果了，所以直接返回a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">or</span> <span class="string">'d'</span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="comment"># in 在dict中是针对key，而不是value</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'bb'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">in</span> &#123;<span class="string">'bb'</span>:<span class="string">'cccccc'</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份运算符，is比较的是内存地址</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a==b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型判断，还是推荐使用isinstance</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a) == str</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'strr'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a,str)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a,(str,int,float))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="IDE编辑代码"><a href="#IDE编辑代码" class="headerlink" title="IDE编辑代码"></a>IDE编辑代码</h3><p>主流pychrm,vscode,sublime,本次使用vscode</p><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><p>打开设置：code-首选项-设置</p><p><code>control+～</code>:打开Terminal</p><p>文件右键-在终端中打开，可以直接进入这个文件所在的目录</p><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>if else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 未优化</span></span><br><span class="line">a = input()</span><br><span class="line">print(type(a))</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"one"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"two"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">3</span>:</span><br><span class="line">            print(<span class="string">"three"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"four"</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 优化后 使用elif</span></span><br><span class="line">a = input()</span><br><span class="line">print(type(a))</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"one"</span>)</span><br><span class="line"><span class="keyword">elif</span> a == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"two"</span>)</span><br><span class="line"><span class="keyword">elif</span> a == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"three"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"four"</span>)</span><br></pre></td></tr></table></figure><h3 id="python项目结构"><a href="#python项目结构" class="headerlink" title="python项目结构"></a>python项目结构</h3><p>包，模块，类（方法，变量）</p><p>在python下：如果想让一个文件夹变成一个包，下面需要用一个<code>__init__.py</code>的文件</p><p>模块的内置,内置属性属性:<code>__all__</code> = [‘a’,’c’]</p><p>python导入模块的时候会先执行这个模块的内容；</p><p>一个.py文件可以认为是一个模块，里面可以包含多个类，但是在开发的时候还是建议一个模块定义一个类</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>序列解包</strong>的时候，直接接收返回的两个结果，例如使用n个变量来接收n个长度的tuple</p><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ol><li>必需参数，必需传入</li><li>关键字参数，函数调用时，实际指定使用什么形参进行接收，可以提高代码的可读性。</li><li>默认参数，指定形参默认值，默认参数只能放在最后面，跳跃赋值的时候可以使用关键字参数进行指定</li></ol><h5 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h5><p>类的方法必须加self，调用成员变量使用self.name</p><p>类的设计其实可以认为包含行为与特征</p><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p><strong>实例方法必须指定self,类似于this,就是指当前对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">  print(<span class="string">'construt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将类变量的值复制给实例变量,会先查找实例变量，再查找类变量，再查找夫类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">  name = name</span><br><span class="line">  age = age</span><br><span class="line">  print(<span class="string">'construt'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将实例变量的值赋给对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">  self.name = name</span><br><span class="line">  self.age = age</span><br><span class="line">  print(<span class="string">'construt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>打印当前对象的值：<code>student1.__dict__</code>,返回{}</p></blockquote><p>在实例方法中访问实例变量，<code>self.name</code>，不建议直接使用name</p><p>访问类变量：<code>Student.sum1</code>或者<code>self__class__sum1</code></p><p>类方法需要加上@classmethod，有点类似于其他方法的静态方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义类方法</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plus_sum</span><span class="params">(cls)</span>:</span></span><br><span class="line">    cls.sum += <span class="number">1</span></span><br><span class="line">    print(cls.sum)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用类方法</span></span><br><span class="line">Sudent.plus_sum()</span><br><span class="line"><span class="comment"># 尽管实例对象可以调用类方法，但是不推荐，这样写不规范</span></span><br><span class="line">student.plus_sum()</span><br></pre></td></tr></table></figure><p>静态方法需要加上@staticmethod,不需要传入cls或者self</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    print(<span class="string">'this is a static method'</span>)</span><br></pre></td></tr></table></figure><p>似有方法<code>方法或者变量使用__开头</code></p><p>student.__score = -1会创建一个新变量 </p><h3 id="封装继承多态"><a href="#封装继承多态" class="headerlink" title="封装继承多态"></a>封装继承多态</h3><p>实现继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> c6</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(c6.People)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 或者,推荐</span></span><br><span class="line"><span class="keyword">from</span> c6 <span class="keyword">import</span> People</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(People)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>python支持多继承</p><p>子类调用父类的构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,school,name,age)</span>:</span></span><br><span class="line">  self.school = school</span><br><span class="line">Human.__init__(self,name,age)</span><br><span class="line">    <span class="comment"># 或者 推荐</span></span><br><span class="line">    super(Stunent,self).__init__(self,name,age)</span><br></pre></td></tr></table></figure><p>python可以通过类调用实例方法，但是不推荐。</p><p>子类与父类有同名方法，会调用父类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(Stunent,self).dohomework</span><br></pre></td></tr></table></figure><p>python在3.4以后才加入的枚举</p><h3 id="python高级语法与用法"><a href="#python高级语法与用法" class="headerlink" title="python高级语法与用法"></a>python高级语法与用法</h3><p>函数可以作为返回，闭包 = 函数 + 环境变量，闭包是函数式编程的体现。</p><p>闭包在写第三方类库的时候推荐使用，在写业务代码的时候不推荐使用。</p><p>然后<code>f = curve_pre</code>,调用<code>f(2)</code></p><h5 id="定义匿名函数（lambda）表达式"><a href="#定义匿名函数（lambda）表达式" class="headerlink" title="定义匿名函数（lambda）表达式"></a>定义匿名函数（lambda）表达式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line"><span class="keyword">lambda</span> x,y:X+y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用匿名函数</span></span><br><span class="line">f = <span class="keyword">lambda</span> x,y:X+y</span><br><span class="line">print(f(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>三元表达式</p><p>条件为真的时候的结果 if 条件判断 else 条件为假的时候的结果</p><p>map类：map会接收集合的每一个元素，映射成某一个结果</p><p><code>r=map(square,list )</code></p><h5 id="map，reduce，filter"><a href="#map，reduce，filter" class="headerlink" title="map，reduce，filter"></a>map，reduce，filter</h5><p>上面三个是常用的lambda的函数（lisp函数式编程的鼻主，在人工智能常用）</p><p>函数式编程结合map:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r = map(<span class="keyword">lambda</span> x: x*x,list_x)</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure><p>python中的*表示可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">list_y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r = map(<span class="keyword">lambda</span> x,y: x*x + y,list_x,list_y)</span><br><span class="line"></span><br><span class="line">print(r)</span><br><span class="line">[<span class="number">2</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">42</span>, <span class="number">56</span>, <span class="number">72</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续计算，将前一个的计算结果作为函数的参数继承传入，直至遍历结束</span></span><br><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x,y:x+y,list_x)</span><br><span class="line"><span class="comment"># 一般返回时都是使用list返回</span></span><br><span class="line">print(list(r))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (((1+2)+3)+4)+5</span></span><br></pre></td></tr></table></figure><p>谷歌在大数据提出了一个map/reduce 的编程模型，代表映射，规约，主要是为了进行并行计算/其就借鉴了lambda表达式函数式编程的思想。</p><p><code>filter</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r = filter(<span class="keyword">lambda</span> x:x&lt;<span class="number">7</span>,list_x)</span><br><span class="line">print(list(r))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h5 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h5><p>装饰器其较常用的，装饰器类似于注解，首先定义装饰器，在定义函数的时候调用这个装饰器</p><p>python提供了这个<strong>语法糖</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="number">1557648258.44</span></span><br><span class="line">It<span class="string">'s a function as f1()</span></span><br></pre></td></tr></table></figure><p>定义支持不同个数参数的装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(*args)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(func_name1,func_name2)</span>:</span></span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name1)</span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name2)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">"test1"</span>)</span><br><span class="line">f2(<span class="string">"test2"</span>,<span class="string">"test3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1557649090.21</span></span><br><span class="line">It<span class="string">'s a function as f1() test1</span></span><br><span class="line"><span class="string">1557649090.21</span></span><br><span class="line"><span class="string">It'</span>s a function <span class="keyword">as</span> f1() test2</span><br><span class="line">It<span class="string">'s a function as f1() test3</span></span><br></pre></td></tr></table></figure><p>处理关键字参数的装饰器（注意<code>*args,**kw</code>这个小技巧）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kw)</span>:</span></span><br><span class="line">        print(time.time())</span><br><span class="line">        func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func_name)</span>:</span></span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(func_name1,func_name2)</span>:</span></span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name1)</span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name2)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(func_name1,func_name2,**kw)</span>:</span></span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name1)</span><br><span class="line">    print(<span class="string">"It's a function as f1() "</span>+func_name2)</span><br><span class="line">    print(kw)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">"test1"</span>)</span><br><span class="line">f2(<span class="string">"test2"</span>,<span class="string">"test3"</span>)</span><br><span class="line">f3(<span class="string">"test2"</span>,<span class="string">"test3"</span>,a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="string">"123"</span>)</span><br></pre></td></tr></table></figure><h4 id="其他补充（装饰器）"><a href="#其他补充（装饰器）" class="headerlink" title="其他补充（装饰器）"></a>其他补充（装饰器）</h4><p>python开发web的web框架flask</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.route('/psw',method=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_javascrip_http</span><span class="params">()</span>:</span></span><br><span class="line">  p = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">  <span class="keyword">return</span> p,<span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.route('/psw',method=['GET'])</span></span><br><span class="line"><span class="meta">@auth.login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pwd</span><span class="params">()</span>:</span></span><br><span class="line">  p = request.args.get(<span class="string">'psw'</span>)</span><br><span class="line">  r = generate_password_hash(p)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'aaaaaa'</span>,<span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="爬虫实战"><a href="#爬虫实战" class="headerlink" title="爬虫实战"></a>爬虫实战</h3><h5 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h5><p>F5开始调试或者进入下一个断点</p><p>F10单步执行</p><p>F11进入方法内部</p><p>一般选择闭合标签，目标标签的父类标签。</p><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><p>匹配所有字符至少有三种写法</p><p>\w 匹配单词字符，\W 匹配非单词字符，一起使用可以匹配所有字符</p><p>\s 匹配空白字符，\S 匹配非空白字符，一起使用可以匹配所有字符</p><p>. 匹配除换行符\n之外其他所有字符</p>]]></content>
      
      
      
        <tags>
            
            <tag> python、编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java与mysql对应数据类型</title>
      <link href="/2019/05/21/java%E4%B8%8Emysql%E5%AF%B9%E5%BA%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/05/21/java%E4%B8%8Emysql%E5%AF%B9%E5%BA%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="java与mysql对应数据类型"><a href="#java与mysql对应数据类型" class="headerlink" title="java与mysql对应数据类型"></a>java与mysql对应数据类型</h3><blockquote><p>通常，任何MySQL数据类型都可以转换为<code>java.lang.String</code>，并且任何数字类型都可以转换为任何Java数字类型，但可能会出现舍入，溢出或精度损失。</p></blockquote><h5 id="MySQL和Java数据类型之间可能的转换"><a href="#MySQL和Java数据类型之间可能的转换" class="headerlink" title="MySQL和Java数据类型之间可能的转换"></a>MySQL和Java数据类型之间可能的转换</h5><p>下表列出了始终保证有效的转换。第一列列出了一种或多种MySQL数据类型，第二列列出了可以转换MySQL类型的一种或多种Java类型。</p><p><img src="/2019/05/21/java与mysql对应数据类型/Users/circleus/Library/Application Support/typora-user-images/image-20190520174344877.png" alt="image-20190520174344877"></p><h5 id="JDBC规范中更详细的类型转换"><a href="#JDBC规范中更详细的类型转换" class="headerlink" title="JDBC规范中更详细的类型转换"></a>JDBC规范中更详细的类型转换</h5><p><code>ResultSet.getObject（）</code>方法使用MySQL和Java类型之间的类型转换，遵循适当的JDBC规范。 <code>ResultSetMetaData.GetColumnTypeName（）</code>和<code>ResultSetMetaData.GetColumnClassName（）</code>返回的值如下表所示。有关JDBC类型的更多信息，请参阅<code>java.sql.Types</code>类的参考。</p><p>以下有一些关于ResultSetMetaData的常用方法：</p><p>　　<strong>·</strong><code>getColumnCount</code>：获取结果集中列项目的个数</p><p>　　<strong>·</strong><code>getColumnType</code>：获取指定列的SQL类型对应于Java中Types类的字段</p><p>　　<strong>·</strong><code>getColumnTypeName</code>：获取指定列的SQL类型</p><p>　　<strong>·</strong><code>getClassName</code>：获取指定列SQL类型对应于Java中的类型(包名加类名)</p><blockquote><p>注意：JDBC是一种规范，是规范关系型数据库与java的一种连接，由于存在各种关系型数据库比如Oracle，MySQL，SQL Server等等，每一种关系型数据库具有不同的规范，甚至规定的数据类型都有细微差别，为了统一规范，JDBC规范中定义了关系型数据库和java数据类型之间的具体转换规则，下面是MySQL的转换规则：</p></blockquote><p><img src="/2019/05/21/java与mysql对应数据类型/Users/circleus/Library/Application Support/typora-user-images/image-20190520181306206.png" alt="image-20190520181306206"></p><p>文章摘自：<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-type-conversions.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-type-conversions.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据类型、java、mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解JMX</title>
      <link href="/2019/05/14/%E7%90%86%E8%A7%A3JMX/"/>
      <url>/2019/05/14/%E7%90%86%E8%A7%A3JMX/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>本文的背景是探索企业级应用监控可视化方案，本文尝试的解决方案是：Prometheus+Grafana动态展示应用的运行状态。</p></blockquote><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>JSR中对JMX的描述定义如下：</p><blockquote><p><code>The JMX specification will provide a management architecture, APIs and services for building Web-based, distributed, dynamic and modular solutions to manage Java enabled resources.</code></p><p>译文：JMX 规范将提供管理体系结构、Api 和服务, 用于构建基于 web 的分布式、动态和模块化解决方案, 以管理支持 Java 的资源。</p></blockquote><p>最后面的<code>to manage Java enabled resources</code>这一句话不是特别好理解，以管理支持 Java 的资源 ,在这里我的理解是比如tomcat，redis，mysql之类的，都是支持java的，JMX依然可以管理这些资源，不过在我们实际应用中更多是利用JMX监控资源的动态变化过程，而不是管理资源。</p><h2 id="相关名词解释"><a href="#相关名词解释" class="headerlink" title="相关名词解释"></a>相关名词解释</h2><p>JMX：Java Management Extensions </p><p>MBenas：Managed Beans</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>JMX发布列表：<code>https://jcp.org/en/jsr/detail?id=3</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> JSR规范、JMX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebServices相关知识点</title>
      <link href="/2019/05/02/WebServices%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/05/02/WebServices%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Services技术"><a href="#Web-Services技术" class="headerlink" title="Web Services技术"></a>Web Services技术</h2><p><strong>背景：</strong>为了方便理解，可以先认为：<code>Web Services = http + xml</code>，而现在流行的Restful可以认为是：<code>Restful = http + json</code>,当然其实这两种说法都是很不严谨的，这么写只是为了方便理解。</p><h5 id="Web-Services特点介绍"><a href="#Web-Services特点介绍" class="headerlink" title="Web Services特点介绍"></a>Web Services特点介绍</h5><p>WebServices 提供一个建立分布式应用的平台，使得运行在不同<a href="http://lib.csdn.net/base/operatingsystem" target="_blank" rel="noopener">操作系统</a>和不同设备上的软件，或者是用不同的程序语言和不同厂商的软件开发工具开发的软件，所有可能的已开发和部署的软件，能够利用这一平台实现分布式计算的目的。WebServices的思想是：使得应用程序也具有 Web 分布式编程模型的松散耦合性。</p><blockquote><p>可以先认为Web Services是一项技术，可以实现不同平台，不同系统的外部调用，比较适合异构系统之间的调用，主要是使用了：HTTP请求协议和XML数据格式，由于国外现在还是在大面积使用Web Services技术，所以还是了解一下比较好。</p></blockquote><p>关于Web Services会听到很多其他的名词，这里可以做一下简单的普及：</p><h5 id="xsd是什么？"><a href="#xsd是什么？" class="headerlink" title="xsd是什么？"></a>xsd是什么？</h5><p>xsd（XML Schema Definition）：是用来描述XML的文档结构的，是属于DTD的替代者，因为xsd是基于XML编写，而DTD不是，而且xsd支持数据结构，支持明明空间等等，所以现在很少人使用老掉牙的DTD了。</p><h5 id="SOAP协议是什么？"><a href="#SOAP协议是什么？" class="headerlink" title="SOAP协议是什么？"></a>SOAP协议是什么？</h5><p>SOAP（Simple Object Access Protocal）：SOAP协议是基于HTTP协议的，基于POST请求发送数据，如果要发送发送一个SOAP协议，需要设置特定的请求头或者是特定的Content—Type如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOAPAction: &quot;http://WebXml.com.cn/getSupportCity&quot;</span><br><span class="line">或者</span><br><span class="line">Content—Type:application/soap+xml</span><br></pre></td></tr></table></figure><p>​    这个时候就可以认为是一个SOAP请求了，但是SOAP请求没有这么简单，我们还需要定义数据格式，SOAP请求对数据格式也是有严格要求的,如下：<code>soap:Envelope</code>是必需的，还有其他元素，Header，Body等等，发送的数据要包含在这里面；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://www.w3.org/2001/12/soap-envelope"</span></span></span><br><span class="line"><span class="tag"><span class="attr">soap:encodingStyle</span>=<span class="string">"http://www.w3.org/2001/12/soap-encoding"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">m:Trans</span> <span class="attr">xmlns:m</span>=<span class="string">"http://www.w3schools.com/transaction/"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">soap:mustUnderstand</span>=<span class="string">"1"</span>&gt;</span>234</span><br><span class="line">  <span class="tag">&lt;/<span class="name">m:Trans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">m:GetPrice</span> <span class="attr">xmlns:m</span>=<span class="string">"http://www.w3schools.com/prices"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m:Item</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">m:Item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">m:GetPrice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="WSDL是什么？"><a href="#WSDL是什么？" class="headerlink" title="WSDL是什么？"></a>WSDL是什么？</h5><p>WSDL（Web Services Description Language）：WSDL是用来描述Web Service的，它用XML的格式描述了WebService有哪些方法、参数类型、访问路径等等。<strong>我们要使用一个Web Service肯定首先要获取它的WSDL</strong>。Web Service服务器端首先要通过一个WSDL文件来说明自己家里有啥服务可以对外调用。</p><p>将WSDL文件保存在Web服务器上，通过一个url地址就可以访问。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。Web Service服务提供商可以通过两种方式来暴露它的WSDL文件地址：1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。</p><p>(提示：IDEA能根据你的Web Service生成WSDL，也能导入WSDL生成响应的代理类代码。)</p><blockquote><p>番外篇：可以认为WebService平台的三大技术分别是：XML+XSD，SOAP，WSDL。可以认为，XML+XSD定义了客户端的数据格式，SOAP定义了传输协议，WSDL定义了服务端的有哪些服务。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Web Services、通信手段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set排序方法</title>
      <link href="/2019/04/22/work/Set%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/"/>
      <url>/2019/04/22/work/Set%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在讲解Set集合排序的几种方法之前，我们应该先清楚Set集合的几种类型以及特点，才能有效使用起来。</p></blockquote><h4 id="Set集合的特点"><a href="#Set集合的特点" class="headerlink" title="Set集合的特点"></a>Set集合的特点</h4><p>​    Set不允许包含相同的元素，如果试图把两个相同元素加入同一个集合中，add方法返回false。<br>​    Set判断两个对象相同不是使用==运算符，而是根据equals方法。也就是说，<strong>只要两个对象用equals方法比较返回true，Set就不会同时接受这两个对象</strong>。</p><h4 id="Set集合的分类"><a href="#Set集合的分类" class="headerlink" title="Set集合的分类"></a>Set集合的分类</h4><p>Set集合主要分为3种：</p><p>​                     |——SortedSet接口——TreeSet实现类</p><p>Set接口——|——HashSet实现类                </p><p>​                     |——LinkedHashSet实现类</p><ul><li>HashSet（无序，可null）</li></ul><p>HashSet的特点是不能保证元素的排列顺序，顺序有可能发生变化，集合元素可以是null,但只能放入一个null。因为在HashSet中存入一个元素的时候，会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据 hashCode值来决定该对象在HashSet中存储位置，所以储存位置是随机的。HashSet就好像是HashMap的key。</p><ul><li>TreeSet（有元素顺序的）</li></ul><p>TreeSet是SortedSet接口的唯一实现类，TreeSet可以确保集合元素处于排序状态。TreeSet支持两种排序方式，自然排序 和定制排序，其中自然排序为默认的排序方式。<strong>一般的Set排序都会使用到TreeSet。</strong></p><ul><li>LinkedHashSet（记录插入顺序）</li></ul><p>LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起 来像是以插入顺 序保存的，也就是说，当遍历该集合时候，LinkedHashSet将会以元素的添加顺序访问集合的元素。一般的，如果让你设计一个缓存算法，LinkedHashSet就是基本的基础，利用LRU，筛选出应该淘汰的元素。</p><p>由于TreeSet是有元素顺序的，因此我们在排序的过程中都会使用TreeSet。</p><p>方法一：传统方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraditionalSetSortTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;BigDecimal&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">1.2</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">3.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">0.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">9.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;BigDecimal&gt; sortSet = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;BigDecimal&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(BigDecimal o1, BigDecimal o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        sortSet.addAll(set);</span><br><span class="line">        System.out.println(sortSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">结果：[<span class="number">0.40</span>, <span class="number">1.20</span>, <span class="number">2.30</span>, <span class="number">2.40</span>, <span class="number">3.40</span>, <span class="number">9.40</span>]</span><br></pre></td></tr></table></figure><p>方法二：lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaSetSortTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;BigDecimal&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">1.2</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">3.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">0.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">9.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        TreeSet&lt;BigDecimal&gt; sortedSet = <span class="keyword">new</span> TreeSet&lt;&gt;(((o1, o2) -&gt; o1.compareTo(o2)));</span><br><span class="line">        sortedSet.addAll(set);</span><br><span class="line">        System.out.println(sortedSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">结果：[<span class="number">0.40</span>, <span class="number">1.20</span>, <span class="number">2.30</span>, <span class="number">2.40</span>, <span class="number">3.40</span>, <span class="number">9.40</span>]</span><br></pre></td></tr></table></figure><p>方法三：使用Comparator，在jdk1.8以后，Comparator有Comparator.naturalOrder()自然排序这个方法，也有Comparator.reverseOrder()相反排序的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorSetSortTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;BigDecimal&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">1.2</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">3.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">0.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">9.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        TreeSet&lt;BigDecimal&gt; sortedSet = <span class="keyword">new</span> TreeSet&lt;&gt;(Comparator.naturalOrder());</span><br><span class="line">        sortedSet.addAll(set);</span><br><span class="line">        System.out.println(sortedSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">结果：[<span class="number">0.40</span>, <span class="number">1.20</span>, <span class="number">2.30</span>, <span class="number">2.40</span>, <span class="number">3.40</span>, <span class="number">9.40</span>]</span><br></pre></td></tr></table></figure><p>方法四：使用Stream</p><blockquote><p>这里使用Stream的时候可以转还成Set或者List，转换成Set的时候还需要再创建TreeSet，如果没有必须要求是Set，其实可以是直接转换成List，直接就是有序的，更加方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; List list = set.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamSetSortTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;BigDecimal&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">1.2</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">3.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">0.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">9.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        Set newSet = set.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toSet());</span><br><span class="line">        TreeSet&lt;Object&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        treeSet.addAll(newSet);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">结果：[<span class="number">0.40</span>, <span class="number">1.20</span>, <span class="number">2.30</span>, <span class="number">2.40</span>, <span class="number">3.40</span>, <span class="number">9.40</span>]</span><br></pre></td></tr></table></figure><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>已知数值a，如果要求向上取值（即寻找顺序的Set集合中一个大于等于a的第一个元素，日常业务还是用到很多的，不到半斤算半斤(含)，超过半斤算一斤类似），可以借用set的floor方法，数值超出元素的最大值后会返回null。举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetFloorMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;BigDecimal&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">1.2</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">3.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">2.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">0.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        set.add(<span class="keyword">new</span> BigDecimal(<span class="number">9.4</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">        TreeSet&lt;BigDecimal&gt; sortedSet = <span class="keyword">new</span> TreeSet&lt;&gt;(Comparator.naturalOrder());</span><br><span class="line">        sortedSet.addAll(set);</span><br><span class="line">        System.out.println(sortedSet);</span><br><span class="line">        BigDecimal value1 = sortedSet.ceiling(<span class="keyword">new</span> BigDecimal(<span class="number">0.5</span>));</span><br><span class="line">        System.out.println(<span class="string">"根据0.5可以取到元素："</span> + value1);</span><br><span class="line">        BigDecimal value2 = sortedSet.ceiling(<span class="keyword">new</span> BigDecimal(<span class="number">2.35</span>));</span><br><span class="line">        System.out.println(<span class="string">"根据2.35可以取到元素："</span> + value2);</span><br><span class="line">        BigDecimal value3 = sortedSet.ceiling(<span class="keyword">new</span> BigDecimal(<span class="number">11</span>));</span><br><span class="line">        System.out.println(<span class="string">"根据11可以取到元素："</span> + value3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">结果如下：</span><br><span class="line">[<span class="number">0.40</span>, <span class="number">1.20</span>, <span class="number">2.30</span>, <span class="number">2.40</span>, <span class="number">3.40</span>, <span class="number">9.40</span>]</span><br><span class="line">根据<span class="number">0.5</span>可以取到元素：<span class="number">1.20</span></span><br><span class="line">根据<span class="number">2.35</span>可以取到元素：<span class="number">2.40</span></span><br><span class="line">根据<span class="number">11</span>可以取到元素：<span class="keyword">null</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Set、排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立Maven复合工程</title>
      <link href="/2019/04/20/work/%E5%BB%BA%E7%AB%8BMaven%E5%A4%8D%E5%90%88%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/04/20/work/%E5%BB%BA%E7%AB%8BMaven%E5%A4%8D%E5%90%88%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><ol><li><p>首先是<strong>建立父工程</strong>，可以使用 Spring Initializr 工具，直接一路默认就可以了，命名默认是：xxx-parent格式；</p></li><li><p>删除 .mvn , src , mvnw , mwnw.cmd 这几个文件，通过Spring Initializr建立文件时，会默认产生这几个文件，主要是为了防止你本地未安装maven，通过这几个mvn相关文件可以给你安装一个maven，父工程的src目录下是不写代码的，所以一并删除掉。</p></li><li><p>将进入pom文件，将这个项目GAV坐标下加一个<code>&lt;packaging&gt;</code>标签，表示以pom文件打包，这个主要目的是进行依赖传递等等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>建立子工程</strong>，选中父工程邮件——new——Module——maven——next(什么都不要填)——填写相关项目信息，完成。</p></li><li><p>可以看到在父工程和子工程里默认增加了相互依赖的关系：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Eureka-Server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.anhe<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><p>按照上面步骤搭建完成的时候可以看到父工程里默认的parent依赖如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有<code>spring-boot-starter</code>和<code>spring-boot-starter-test</code>的依赖，这些都可以删除，可以将<dependencies>标签里的所有依赖都删除掉。</dependencies></p><p><properties>标签可以按如下配置</properties></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是Cloud工程，需要添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Maven复合工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客，Github部署</title>
      <link href="/2019/04/19/work/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%EF%BC%8C%E9%83%A8%E7%BD%B2%E5%88%B0Github%E4%B8%BB%E9%A1%B5/"/>
      <url>/2019/04/19/work/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%EF%BC%8C%E9%83%A8%E7%BD%B2%E5%88%B0Github%E4%B8%BB%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Hexo是目前一个比较流行的博客框架，选这个博客框架的好处在于使用人群多，出现问题可以可以找到怎么解决，而且网上主题也比较多，有更多选择。</p><h4 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h4><ol><li><p>首先安装node.js，因为Hexo是是基于node.js的。访问nodejs.org，下载node LTS版本，即node.js的长支持(Long Time Support)版本,安装完查看npm版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>切换到root用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure></li><li><p>安装npm淘宝镜像仓库，访问更快</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -g 表示全局安装</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>安装hexo客户端，并初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装hexo客户端</span></span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证是否安装成功，同时可以看见hexo是需要node的支持的</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li><li><p>创建空文件夹，用于存放相关文件(note:必须为空的，隐藏文件也不行，最好的办法是新建)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目前是在/Users/circleus目录下</span></span><br><span class="line">pwd</span><br><span class="line">-- /Users/circleus目录下</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建新文件夹</span></span><br><span class="line">mkdir blog</span><br><span class="line">cd blog</span><br></pre></td></tr></table></figure></li><li><p>初始化hexo，启动hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化</span></span><br><span class="line">sudo hexo init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动hexo,或者使用hexo s都可以</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>启动后会返回在localhost:4000端口启动,这个时候可以上去看一下，的确是，已经启动成功了。</p><p><img src="/2019/04/19/work/搭建Hexo博客，部署到Github主页/./image-20190419235119618.png" alt="image-20190419235119618"></p></li><li><p>hexo的命令不多，只有如下几种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先用 control+c 退出运行状态，再使用hexo new 创建博客</span></span><br><span class="line">hexo new "我的第一篇博客文章"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用vi编辑完成之后，需要回到blog根目录需要清理一下</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成一下博客</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><p>部署到github主页，创建新的仓库，名字必须是:<strong>名字.github.io</strong></p></li><li><p>需要在bolg目录下安装一个部署到github主页的插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm intall --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>编辑blog目录下的<code>_config.yml</code>文件，配置github主页。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/tangyongshuang/tangyongshuang.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>部署到github主页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> d表示deploy，部署</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>再访问自己的github主页：<code>tangyongshuang.github.io</code>，就可以看到，已经正常呈现了。</p></li></ol><p><img src="/2019/04/19/work/搭建Hexo博客，部署到Github主页/./image-20190420000501859.png" alt="image-20190420000501859"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo搭建之道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/19/work/hello-world/"/>
      <url>/2019/04/19/work/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
